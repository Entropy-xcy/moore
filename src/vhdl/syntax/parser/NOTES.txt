Names
-----

primary_name:
	ident
	char_lit
	string_lit

prefix:
	primary_name
	prefix "." ident               # selected_name
	prefix "." char_lit            # selected_name
	prefix "." string_lit          # selected_name
	prefix "." "all"               # selected_name
	prefix [signature] "'" ident   # attribute_name
	prefix "(" assoc_list ")"      # func_call, slice_name, indexed_name


Expressions
-----------

primary_expr:
	name                  # name, func_call, type_conv, physical_lit, enum_lit
	name "'" paren_expr   # qualified_expr
	abstract_lit
	abstract_lit name     # physical_lit
	bit_string_lit
	"null"
	paren_expr            # aggregate, (expr)
	"new" name [constraint]                              # alloc/subtype_ind
	"new" name name [constraint]                         # alloc/subtype_ind
	"new" "(" element_resolution ")" name [constraint]   # alloc/subtype_ind
	"new" name "'" paren_expr                            # alloc/qualified_expr

paren_expr:
	"(" {[{(expr|"others") "|"}+ "=>"] expr ","}+ ")"   # aggregate

expr:
	[0] primary_expr
	[1] "abs" expr[0]
	[1] "not" expr[0]
	[1] logical_op expr[0]
	[1] expr[0] "**" expr[0]       # enforce non-associativity later
	[2] expr[2] mult_op expr[1]
	[3] sign expr[2]
	[4] expr[4] add_op expr[3]     # enforce sign/term stuff later
	[5] expr[5] shift_op expr[4]   # enforce non-associativity later
	[6] expr[6] rel_op expr[5]     # enforce non-associativity later
	[7] expr[7] logical_op expr[6] # enforce non-associativity for nand/nor later
	[8] "??" expr[0]
